"""
Visualization script for model predictions using seaborn
-----------------------------------------------------

This module loads the ``model_predictions.csv`` file generated by the
``stress_predict.ipynb`` notebook and produces a handful of diagnostic
plots.  The goal is to make it easy to inspect the overall performance
of the stressâ€‘prediction model outside of the notebook environment.

Usage::

    python visualize_output.py

Running the script will create two PNG files in the working directory:
``confusion_matrix.png`` and ``predicted_distribution.png``.  It will
also display the figures interactively if a graphical backend is
available.
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix


def main() -> None:
    """Entry point for the visualization script."""
    # Load the predictions; the CSV is expected to live in the same folder
    csv_path = 'model_predictions.csv'
    try:
        df = pd.read_csv(csv_path)
    except FileNotFoundError as exc:
        raise SystemExit(f"Could not find '{csv_path}'. Please run the model notebook first.") from exc

    # Determine the unique class names preserving the natural order
    # The ``actual_label`` column comes from ``class_names`` in the notebook
    class_names = sorted(df['actual_label'].unique())

    # Compute confusion matrix on the entire data set
    cm = confusion_matrix(df['actual_label'], df['predicted_label'], labels=class_names)

    # Plot confusion matrix
    plt.figure(figsize=(8, 6))
    sns.heatmap(
        cm,
        annot=True,
        fmt='d',
        cmap='viridis',
        xticklabels=class_names,
        yticklabels=class_names
    )
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.title('Confusion Matrix (Seaborn)')
    plt.tight_layout()
    plt.savefig('confusion_matrix.png')
    # Display if possible
    try:
        plt.show()
    except Exception:
        pass
    plt.close()

    # Plot distribution of predicted stress levels
    plt.figure(figsize=(8, 4))
    sns.countplot(
        data=df,
        x='predicted_label',
        order=class_names,
        color='skyblue'
    )
    plt.title('Distribution of Predicted Stress Levels')
    plt.xlabel('Predicted Label')
    plt.ylabel('Count')
    plt.tight_layout()
    plt.savefig('predicted_distribution.png')
    try:
        plt.show()
    except Exception:
        pass
    plt.close()


if __name__ == '__main__':
    main()
